"""
PATR√ìN PROFESIONAL: Service Layer con @with_transaction
================================================

Este Service demuestra el patr√≥n profesional de arquitectura en capas:
- L√≥gica de negocio separada del HTTP
- Transacciones autom√°ticas
- Inyecci√≥n autom√°tica de sesiones en repositories
"""

import uuid
from db.db import with_transaction
from .user_repository import UserRepository


class UserService:
    """
    PASO 2: SERVICE LAYER
    
    - Contiene la l√≥gica de negocio
    - Usa @with_transaction para manejo autom√°tico de transacciones
    - Coordina m√∫ltiples repositories
    - No conoce nada sobre HTTP/FastAPI
    """
    
    def __init__(self):
        # PASO 2.1: Inicializar repositories
        # Cada repository hereda de IAsyncDatabaseRepository
        self.user_repo = UserRepository()
        
        # En un caso real tendr√≠as m√∫ltiples repositories:
        # self.profile_repo = ProfileRepository()
        # self.notification_repo = NotificationRepository()
        # self.audit_repo = AuditRepository()
    
    @with_transaction  # ‚Üê PASO 2.2: AQU√ç OCURRE LA MAGIA
    async def create_user_with_profile(self, name: str, email: str):
        """
        CASO DE USO: Crear usuario con perfil completo
        
        ¬øQu√© hace @with_transaction?
        1. Crea una nueva sesi√≥n de DB
        2. Busca todos los repositories en self.*_repo
        3. Inyecta autom√°ticamente la sesi√≥n en cada repository (self.user_repo.db = session)
        4. Ejecuta esta funci√≥n
        5. Si todo OK ‚Üí commit autom√°tico
        6. Si hay error ‚Üí rollback autom√°tico
        7. Siempre ‚Üí close autom√°tico
        """
        
        # PASO 2.3: L√≥gica de negocio - Coordinar m√∫ltiples operaciones
        
        # Operaci√≥n 1: Crear usuario base
        user = await self.user_repo.create_user(name, email)
        
        # Operaci√≥n 2: Crear perfil por defecto (simulado)
        # profile_id = await self.profile_repo.create_profile(user_id, "default")
        
        # Operaci√≥n 3: Enviar notificaci√≥n de bienvenida (simulado) 
        # await self.notification_repo.create_notification(
        #     user_id, "¬°Bienvenido a la plataforma!"
        # )
        
        # Operaci√≥n 4: Registrar en auditor√≠a (simulado)
        # await self.audit_repo.log_user_creation(user_id, email)
        
        # IMPORTANTE: Si cualquier await falla, TODO se revierte autom√°ticamente
        # No necesitas try/catch para manejo de transacciones
        
        return user
    
    @with_transaction
    async def update_user_transactional(self, user_id: uuid.UUID, name: str|None, email: str|None):
        """
        CASO DE USO: Actualizaci√≥n transaccional con validaciones
        
        Demuestra c√≥mo el rollback autom√°tico funciona cuando hay errores
        """
        
        # Paso 1: Validar que el usuario existe
        existing_user = await self.user_repo.get_user_by_id(user_id)
        if not existing_user:
            # Esta excepci√≥n activar√° rollback autom√°tico
            raise ValueError(f"Usuario con ID {user_id} no encontrado")
        
        # Paso 2: Actualizar datos del usuario
        updated_user = await self.user_repo.update_user(user_id, name, email)
        
        # Paso 3: Validaciones de negocio (pueden fallar)
        if email and "@" not in email:
            # Esta excepci√≥n activar√° rollback autom√°tico
            raise ValueError("Email inv√°lido")
        
        # Paso 4: Operaciones adicionales (simuladas)
        # await self.audit_repo.log_user_update(user_id, name, email)
        # await self.notification_repo.notify_profile_updated(user_id)
        
        # Si llegamos aqu√≠, commit autom√°tico
        return updated_user
    
    @with_transaction
    async def delete_user_cascade(self, user_id: uuid.UUID):
        """
        CASO DE USO: Eliminaci√≥n en cascada
        
        Operaci√≥n compleja que debe ser completamente transaccional.
        Si cualquier paso falla, TODO se revierte.
        """
        
        # Paso 1: Eliminar notificaciones del usuario
        # await self.notification_repo.delete_by_user_id(user_id)
        
        # Paso 2: Eliminar perfil del usuario  
        # await self.profile_repo.delete_by_user_id(user_id)
        
        # Paso 3: Eliminar sesiones activas
        # await self.session_repo.delete_by_user_id(user_id)
        
        # Paso 4: Eliminar usuario principal
        await self.user_repo.delete_user(user_id)
        
        # Paso 5: Registrar eliminaci√≥n en auditor√≠a
        # await self.audit_repo.log_user_deletion(user_id)
        
        # Si cualquier paso falla, TODA la operaci√≥n se revierte
        # Esto garantiza que no queden datos hu√©rfanos
        
        return {"message": "Usuario eliminado completamente"}


# =============================================================================
# RESUMEN DEL PATR√ìN @with_transaction
# =============================================================================

"""
üéØ REGLAS DE ORO PARA USAR @with_transaction:

1. SOLO en m√©todos de SERVICE LAYER
   ‚úÖ class UserService: @with_transaction async def method(self):
   ‚ùå En controllers/routers
   ‚ùå En repositories  
   ‚ùå En funciones standalone

2. Repositories SIEMPRE heredan de IAsyncDatabaseRepository
   ‚úÖ class UserRepository(IAsyncDatabaseRepository):
   ‚ùå class UserRepository: # Sin herencia

3. Un @with_transaction = Una transacci√≥n completa
   ‚úÖ Una operaci√≥n de negocio = un m√©todo con @with_transaction
   ‚ùå M√∫ltiples @with_transaction en una misma operaci√≥n

4. No manejes transacciones manualmente dentro del service
   ‚ùå await session.commit() # @with_transaction ya lo hace
   ‚ùå await session.rollback() # @with_transaction ya lo hace
   ‚úÖ Solo lanza excepciones si algo est√° mal

5. Validaciones de negocio con excepciones
   ‚úÖ raise ValueError("Email inv√°lido") # Activa rollback autom√°tico
   ‚úÖ raise BusinessException("Stock insuficiente") 

‚ú® VENTAJAS:
- C√≥digo limpio sin boilerplate de transacciones
- Rollback autom√°tico en cualquier error
- Inyecci√≥n autom√°tica de sesiones
- Arquitectura en capas bien definida
- F√°cil testing (services independientes)
"""